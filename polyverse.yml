polyverse/config/vfi: |
  {
    "etcd": {
      "type": "dockerImage",
      "address": "quay.io/coreos/etcd:v3.0.12"
    },
    "nsq": {
      "type": "dockerImage",
      "address": "nsqio/nsq:v0.3.8"
    },
    "supervisor": {
      "type": "dockerImage",
      "address": "polyverse/supervisor:3e11e266c5d0c7aeed32f826da53eaece5f9411f"
    },
    "router": {
      "type": "dockerImage",
      "address": "polyverse/router:99b61de3d4a2aca291105e2caedbfe5bcc6f7f29"
    },
    "containerManager": {
      "type": "dockerImage",
      "address": "polyverse/container-manager:9c279e40a4482a1d62cb7aa7f567538dad46e2d7"
    }
  }
polyverse/config/docker/config_json: |
  {
    "auths": {
      "https://index.docker.io/v1/": {
        "auth": "cHZyZWFkb25seTpnd2JLcjd4Vm5CRzlZeQ=="
      }
    }
  }
polyverse/config/monitoring/docker_log_driver: "gelf"
polyverse/config/monitoring/docker_log_opts: |
  { "gelf-address":"udp://192.168.84.130:12201" }
polyverse/config/monitoring/log_source_line: "true"
polyverse/config/monitoring/log_container_changes: "true"
polyverse/config/monitoring/log_metrics: "false"
polyverse/config/monitoring/statsd_endpoint: "127.0.0.1:8125"
polyverse/config/monitoring/statter_cluster_name: "chris_test_cluster"
polyverse-apps/website: |
  app = function() {

    function getCookieValue(r, c, key) {
      if (r.Header["Cookie"]) {
        cookies = r.Header["Cookie"][0].split(";");
        for (var i = 0; i < cookies.length; i++) {
          cookie = cookies[i].trim().split("=");
          if (key == cookie[0]) {
            if (cookie.length > 1) {
              return cookie[1];
            } else {
              return "";
            }
          }
        } 
      }
      return "";
    }

    // TO DO: this doesn't work. results in otto panicking while performing a reflection.
    function getCookieJar(r, c) {
      var obj = {};

      if (r.Header["Cookie"]) {
        cookies = r.Header["Cookie"][0].split(";");
        for (var i = 0; i < cookies.length; i++) {
          cookie = cookies[i].split("=");
          k = cookie[0];
          if (cookie.length > 1) {
            v = cookie[1];
          } else {
            v = "";
          }
          obj[k] = v;
        }
      }

      c.Log.Infof("getCookieJar() = %v", obj);
      return obj;
    }

    return {
      Name: function() {
        return "pv";
      },
      IsRequestSupported: function(r, c) {
        return true ;
      },
      Route: function(r, c) {
        var routeInfoType = getCookieValue(r, c, "routeType");
        var appName = getCookieValue(r, c, "appName");

        var baseImage = getCookieValue(r, c, "routeTypeVal");
        var proxyPass = getCookieValue(r, c, "routeTypeVal");

        c.Log.Infof("Route() routeInfoType:" + routeInfoType + ", appName:" + appName + ", baseImage:" + baseImage + "proxyPass:" + proxyPass);

        if ((routeInfoType == "URL") && (proxyPass == "")) {
          c.Log.Errorf("routeInfoType == URL but proxyPass is empty.");
          return null;
        }

        if ((routeInfoType == "ManagedContainer") && (baseImage == "")) {
          c.Log.Errorf("routeInfoType == ManagedContainer but baseImage is empty.");
          return null;
        }

        var routeBindingPort = getCookieValue(r, c, "routeBindingPort");

        if (routeInfoType == "ManagedContainer") {
          var bindingPort = getCookieValue(r, c, "routeBindingPort");
          if (bindingPort == "") {
            c.Log.Infof("bindingPort is empty. Setting to 8080.");
            bindingPort = "8080";
          }

          c.Log.Infof("Launching with BindingPort=" + parseInt(bindingPort) + ", BaseImage=" + baseImage);

          return {
            ID: appName,
            Timeout: 5 * 60 * 1000000000,
            ManagedContainer: {
              BaseImage: baseImage,
              PerInstanceTimeout: 10 * 1000000000,
              DesiredInstances: 3,
              IsStateless: true,
              HealthCheckURLPath: "/",
              LaunchGracePeriod: 60 * 1000000000,
              ConnectionDrainGracePeriod: 3 * 1000000000,
              Cmd: [''],
              BindingPort: parseInt(bindingPort)
            }
          };
        }

        if (routeInfoType == "URL") {
          var proxypass = "-proxy-pass=";
          proxypass = proxypass.concat(proxyPass);
          return {
            ID: appName,
            Timeout: 5 * 60 * 1000000000,
            ManagedContainer: {
              BaseImage: "polyverse/modsecurity:8e1da091bef5b8ece7ca1d87e05e220ed8c96bcd",
              PerInstanceTimeout: 10 * 1000000000,
              DesiredInstances: 3,
              IsStateless: true,
              HealthCheckURLPath: "/health",
              LaunchGracePeriod: 60 * 1000000000,
              ConnectionDrainGracePeriod: 5 * 1000000000,
              Cmd: [proxypass, "-SecAuditLogParts=ABFHKZ"],
              BindingPort: 8080
            }
          };
        }
      
        return {
          ID: "default",
          Timeout: 365 * 24 * 60 * 60 * 1000000000,
          ManagedContainer: {
            BaseImage: "polyverse/polysploit",
            PerInstanceTimeout: 5 * 1000000000,
            DesiredInstances: 5,
            IsStateless: true,
            HealthCheckURLPath: "/",
            LaunchGracePeriod: 60 * 1000000000,
            ConnectionDrainGracePeriod: 3 * 1000000000,
            Cmd: [''],
            BindingPort: 8080
          }
        };
      },
      ValidationInfo: function() {
        return {
          PositiveRequests: [],
          NegativeRequests: []
        }
      }
    };
  }();
