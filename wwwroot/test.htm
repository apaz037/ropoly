<html>
<head>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript" src="js/pvlib.js"></script>
<script>
var NUM_ROWS = 10;
var FLUSH_INTERVAL = 5000;
var chartOptions = {
  height: 500,
  hAxis: {
    title: "Time",
  },
  vAxis: {
    title: "Requests"
  }
};

var requestNotRouted = new AppInfo("http://localhost:8080/reflect");

var requestRouted = new AppInfo("http://localhost:8080/reflect");
requestRouted.ID = "requestRouted";

var requestInfectNoCycling = new AppInfo("http://localhost:8080/infect");
requestInfectNoCycling.ID = "infectNoCycling";
requestInfectNoCycling.IsStateless = false;

var requestInfectCycled = new AppInfo("http://localhost:8080/infect");
requestInfectCycled.ID = "infectCycled";
requestInfectCycled.PerInstanceTimeout = 5000000000;

var myStatter = new Statter(NUM_ROWS);
google.charts.load('current', {packages: ['corechart', 'line']});
google.charts.setOnLoadCallback(init);

function init() {
  for (var i = 0; i < NUM_ROWS; i++) {
    var d = new Date();
    myStatter.Gauge("Index",d.toLocaleTimeString());
    myStatter.Flush();
  }
  //myStatter.Gauge("200",0);
  //myStatter.Flush();
  refresh();
}

function refresh() {
  var chart = new google.visualization.LineChart(document.getElementById('chart_div'));
  var data = new google.visualization.arrayToDataTable(myStatter.ToArray(),false);
  chart.draw(data, chartOptions);
}

var counter = 0;
function flush() {
  counter++;
  var d = new Date();
  myStatter.Gauge("Index",d.toLocaleTimeString());
  //console.log(d.toLocaleTimeString());
  //myStatter.Gauge("400",Math.random() * 100);
  myStatter.Flush();
  refresh();
}

function myCallbackFunction(data, status, xhr) {
  status = "000";
  if (xhr.status != undefined) {
    status = xhr.status.toString();
  }
  if (data.status != undefined) {
    status = data.status.toString();
  }
  myStatter.Inc(status, 1);
}

function gaugeInfectCycling(data, status, xhr) {
  console.log("InfectCycling: data = " + data);
  myStatter.Gauge("InfectCycling",Number(data));
}

function gaugeInfectNoCycling(data, status, xhr) {
  console.log("InfectNoCycling: data = " + data);
  myStatter.Gauge("InfectNoCycling", Number(data));
}

var timers = [];

function startTimer() {
  timers.push(setInterval(flush, FLUSH_INTERVAL));
  timers.push(setInterval("requestRouted.Submit(myCallbackFunction)", 500));
  timers.push(setInterval("requestNotRouted.Submit(myCallbackFunction)", 700));
  timers.push(setInterval("requestInfectNoCycling.Submit(gaugeInfectNoCycling)", 2000));
  timers.push(setInterval("requestInfectCycled.Submit(gaugeInfectCycling)", 1000));
}

function stopTimer() {
  for (var i = 0; i < timers.length; i++) {
    clearInterval(timers[i]);
  }
}

</script>
</head>
<body>
<input type=button value="Start" onclick="startTimer();"/><input type=button value="Stop" onclick="stopTimer();"/>
<p/>
<div id="chart_div"></div>
</body>
</html
